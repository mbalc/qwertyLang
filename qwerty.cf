-- programs ------------------------------------------------

entrypoints Program ;

MainProg.   Program ::= [FnDef] ;

TopDef.    FnDef ::= Type Ident Args Block ;

FunArgs.   Args ::= "(" [Arg] ")" ;

separator nonempty FnDef "" ;

FunArg.    Arg ::= Type Ident ;

separator  Arg "," ;


-- statements ----------------------------------------------

ScopeBlock. Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

NestFunc.  Stmt ::= FnDef ; -- TODO

Decl.      Stmt ::= Type [Item] ";" ;

-- 15pkt - 7b) - rzuca Runtime Exception przy próbie nadpisania;
-- tak jest najprościej, ale gdy okaże się, że będzie to dostatecznie łatwe do zrobienia,
-- to wrzucę tego consta po prostu do typów
-- ConstDecl. Stmt ::= "const" Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Assert.    Stmt ::= "assert" Expr ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

-- VRet.      Stmt ::= "return" ";" ;

-- Break.     Stmt ::= "break" ";" ;

-- Continue.  Stmt ::= "continue" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

-- 15pkt - 7b)
-- For.       Stmt ::= "for" "(" Ident "in" Range ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- 15pkt - 7b); zakres liczbowy (dla "( a : b )" jesli a > b, to od b do a, wpp od a do b)
-- ForRange.  Range ::= "(" Integer ":" Integer ")" ;


-- Types ---------------------------------------------------

-- 15pkt - 1.
TInt.      Type ::= "int" ;

-- 15pkt - 1.
TStr.      Type ::= "string" ;

-- 15pkt - 1.
TBool.     Type ::= "boolean" ;

TVoid.     Type ::= "void" ;

-- 30pkt - lambdas
TFun.      Type ::= "((" [Type] ")" "=>" Type ")";

separator  Type "," ;


-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

-- 30pkt - lambdas
ELambda.   Expr6 ::= Args "=>" Block ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Expr "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;


-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

